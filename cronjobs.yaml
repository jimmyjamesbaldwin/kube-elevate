apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: delete-expired-rolebindings
  namespace: kube-elevate
spec:
  schedule: "*/1 * * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: kube-elevate
          containers:
          - name: delete-expired-rolebindings
            image: bitnami/kubectl
            imagePullPolicy: Always
            command: ["/bin/bash", "-c"]
            args:
            - |
                #!/bin/bash
                for NS in $(kubectl get namespaces -o name | cut -f 2 -d "/")
                do 
                  for NAME in $(kubectl --namespace=$NS get rolebindings -o name)
                  do
                    exp=$( kubectl get --namespace $NS $NAME -o jsonpath={.metadata.annotations."expirytime"} 2> /dev/null) && \
                    if [ -z "$exp" ]
                    then
                      continue
                    fi
                    echo $exp && \
                    echo $(date +%s) && \
                    if [ $exp -le $(date +%s) ]
                    then
                      echo "Deleting expired rolebindings $NAME in $NS"
                      kubectl delete $NAME -n $NS
                    fi
                  done
                done
          restartPolicy: OnFailure
#https://stackoverflow.com/questions/54904069/how-to-schedule-a-cronjob-which-executes-a-kubectl-command/54908449#54908449
#https://stackoverflow.com/questions/34666031/kubernetes-endpoints-with-ttl
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: delete-expired-elevatepermissionobjects
  namespace: kube-elevate
spec:
  schedule: "*/1 * * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: kube-elevate
          containers:
          - name: delete-expired-elevatepermissionobjects
            image: bitnami/kubectl
            imagePullPolicy: Always
            command: ["/bin/bash", "-c"]
            args:
            - |
                #!/bin/bash
                echo Cleaning up ElevatePermission objects >48 hours old
                kubectl get elevatepermission -o go-template --template '{{range .items}}{{.metadata.name}} {{.metadata.creationTimestamp}}{{"\n"}}{{end}}' | \
                awk '$2 <= "'$(date -d'now-2 minutes' -Ins --utc | sed 's/+0000/Z/')'" { print $1 }' | xargs --no-run-if-empty kubectl delete elevatepermission
          restartPolicy: OnFailure